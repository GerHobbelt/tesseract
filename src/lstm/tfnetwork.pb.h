// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfnetwork.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tfnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tfnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tfnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tfnetwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tfnetwork_2eproto;
namespace tesseract {
class TFNetworkModel;
struct TFNetworkModelDefaultTypeInternal;
extern TFNetworkModelDefaultTypeInternal _TFNetworkModel_default_instance_;
}  // namespace tesseract
PROTOBUF_NAMESPACE_OPEN
template<> ::tesseract::TFNetworkModel* Arena::CreateMaybeMessage<::tesseract::TFNetworkModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tesseract {

// ===================================================================

class TFNetworkModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tesseract.TFNetworkModel) */ {
 public:
  inline TFNetworkModel() : TFNetworkModel(nullptr) {}
  ~TFNetworkModel() override;
  explicit constexpr TFNetworkModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFNetworkModel(const TFNetworkModel& from);
  TFNetworkModel(TFNetworkModel&& from) noexcept
    : TFNetworkModel() {
    *this = ::std::move(from);
  }

  inline TFNetworkModel& operator=(const TFNetworkModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFNetworkModel& operator=(TFNetworkModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFNetworkModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFNetworkModel* internal_default_instance() {
    return reinterpret_cast<const TFNetworkModel*>(
               &_TFNetworkModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TFNetworkModel& a, TFNetworkModel& b) {
    a.Swap(&b);
  }
  inline void Swap(TFNetworkModel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFNetworkModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFNetworkModel* New() const final {
    return new TFNetworkModel();
  }

  TFNetworkModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFNetworkModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TFNetworkModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TFNetworkModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFNetworkModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tesseract.TFNetworkModel";
  }
  protected:
  explicit TFNetworkModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 3,
    kImageInputFieldNumber = 11,
    kImageWidthsFieldNumber = 12,
    kImageHeightsFieldNumber = 13,
    kOutputLayerFieldNumber = 14,
    kGraphFieldNumber = 1,
    kGlobalStepFieldNumber = 2,
    kDepthFieldNumber = 4,
    kXSizeFieldNumber = 5,
    kYSizeFieldNumber = 6,
    kBatchSizeFieldNumber = 8,
    kNumClassesFieldNumber = 9,
    kUsingCtcFieldNumber = 10,
  };
  // string spec = 3;
  void clear_spec();
  const std::string& spec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spec();
  PROTOBUF_MUST_USE_RESULT std::string* release_spec();
  void set_allocated_spec(std::string* spec);
  private:
  const std::string& _internal_spec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spec(const std::string& value);
  std::string* _internal_mutable_spec();
  public:

  // string image_input = 11;
  void clear_image_input();
  const std::string& image_input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_input();
  PROTOBUF_MUST_USE_RESULT std::string* release_image_input();
  void set_allocated_image_input(std::string* image_input);
  private:
  const std::string& _internal_image_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_input(const std::string& value);
  std::string* _internal_mutable_image_input();
  public:

  // string image_widths = 12;
  void clear_image_widths();
  const std::string& image_widths() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_widths(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_widths();
  PROTOBUF_MUST_USE_RESULT std::string* release_image_widths();
  void set_allocated_image_widths(std::string* image_widths);
  private:
  const std::string& _internal_image_widths() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_widths(const std::string& value);
  std::string* _internal_mutable_image_widths();
  public:

  // string image_heights = 13;
  void clear_image_heights();
  const std::string& image_heights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_heights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_heights();
  PROTOBUF_MUST_USE_RESULT std::string* release_image_heights();
  void set_allocated_image_heights(std::string* image_heights);
  private:
  const std::string& _internal_image_heights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_heights(const std::string& value);
  std::string* _internal_mutable_image_heights();
  public:

  // string output_layer = 14;
  void clear_output_layer();
  const std::string& output_layer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_layer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_layer();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_layer();
  void set_allocated_output_layer(std::string* output_layer);
  private:
  const std::string& _internal_output_layer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_layer(const std::string& value);
  std::string* _internal_mutable_output_layer();
  public:

  // .opencv_tensorflow.GraphDef graph = 1;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::opencv_tensorflow::GraphDef& graph() const;
  PROTOBUF_MUST_USE_RESULT ::opencv_tensorflow::GraphDef* release_graph();
  ::opencv_tensorflow::GraphDef* mutable_graph();
  void set_allocated_graph(::opencv_tensorflow::GraphDef* graph);
  private:
  const ::opencv_tensorflow::GraphDef& _internal_graph() const;
  ::opencv_tensorflow::GraphDef* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::opencv_tensorflow::GraphDef* graph);
  ::opencv_tensorflow::GraphDef* unsafe_arena_release_graph();

  // int64 global_step = 2;
  void clear_global_step();
  ::PROTOBUF_NAMESPACE_ID::int64 global_step() const;
  void set_global_step(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_global_step() const;
  void _internal_set_global_step(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 depth = 4;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x_size = 5;
  void clear_x_size();
  ::PROTOBUF_NAMESPACE_ID::int32 x_size() const;
  void set_x_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x_size() const;
  void _internal_set_x_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y_size = 6;
  void clear_y_size();
  ::PROTOBUF_NAMESPACE_ID::int32 y_size() const;
  void set_y_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y_size() const;
  void _internal_set_y_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batch_size = 8;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_classes = 9;
  void clear_num_classes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes() const;
  void set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_classes() const;
  void _internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool using_ctc = 10;
  void clear_using_ctc();
  bool using_ctc() const;
  void set_using_ctc(bool value);
  private:
  bool _internal_using_ctc() const;
  void _internal_set_using_ctc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tesseract.TFNetworkModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_widths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_heights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_layer_;
  ::opencv_tensorflow::GraphDef* graph_;
  ::PROTOBUF_NAMESPACE_ID::int64 global_step_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes_;
  bool using_ctc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TFNetworkModel

// .opencv_tensorflow.GraphDef graph = 1;
inline bool TFNetworkModel::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool TFNetworkModel::has_graph() const {
  return _internal_has_graph();
}
inline const ::opencv_tensorflow::GraphDef& TFNetworkModel::_internal_graph() const {
  const ::opencv_tensorflow::GraphDef* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_tensorflow::GraphDef&>(
      ::opencv_tensorflow::_GraphDef_default_instance_);
}
inline const ::opencv_tensorflow::GraphDef& TFNetworkModel::graph() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.graph)
  return _internal_graph();
}
inline void TFNetworkModel::unsafe_arena_set_allocated_graph(
    ::opencv_tensorflow::GraphDef* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tesseract.TFNetworkModel.graph)
}
inline ::opencv_tensorflow::GraphDef* TFNetworkModel::release_graph() {
  
  ::opencv_tensorflow::GraphDef* temp = graph_;
  graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opencv_tensorflow::GraphDef* TFNetworkModel::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:tesseract.TFNetworkModel.graph)
  
  ::opencv_tensorflow::GraphDef* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::opencv_tensorflow::GraphDef* TFNetworkModel::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_tensorflow::GraphDef>(GetArenaForAllocation());
    graph_ = p;
  }
  return graph_;
}
inline ::opencv_tensorflow::GraphDef* TFNetworkModel::mutable_graph() {
  ::opencv_tensorflow::GraphDef* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:tesseract.TFNetworkModel.graph)
  return _msg;
}
inline void TFNetworkModel::set_allocated_graph(::opencv_tensorflow::GraphDef* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:tesseract.TFNetworkModel.graph)
}

// int64 global_step = 2;
inline void TFNetworkModel::clear_global_step() {
  global_step_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TFNetworkModel::_internal_global_step() const {
  return global_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TFNetworkModel::global_step() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.global_step)
  return _internal_global_step();
}
inline void TFNetworkModel::_internal_set_global_step(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  global_step_ = value;
}
inline void TFNetworkModel::set_global_step(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_global_step(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.global_step)
}

// string spec = 3;
inline void TFNetworkModel::clear_spec() {
  spec_.ClearToEmpty();
}
inline const std::string& TFNetworkModel::spec() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.spec)
  return _internal_spec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TFNetworkModel::set_spec(ArgT0&& arg0, ArgT... args) {
 
 spec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.spec)
}
inline std::string* TFNetworkModel::mutable_spec() {
  std::string* _s = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:tesseract.TFNetworkModel.spec)
  return _s;
}
inline const std::string& TFNetworkModel::_internal_spec() const {
  return spec_.Get();
}
inline void TFNetworkModel::_internal_set_spec(const std::string& value) {
  
  spec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::_internal_mutable_spec() {
  
  return spec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::release_spec() {
  // @@protoc_insertion_point(field_release:tesseract.TFNetworkModel.spec)
  return spec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TFNetworkModel::set_allocated_spec(std::string* spec) {
  if (spec != nullptr) {
    
  } else {
    
  }
  spec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spec,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tesseract.TFNetworkModel.spec)
}

// int32 depth = 4;
inline void TFNetworkModel::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::depth() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.depth)
  return _internal_depth();
}
inline void TFNetworkModel::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void TFNetworkModel::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.depth)
}

// int32 x_size = 5;
inline void TFNetworkModel::clear_x_size() {
  x_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::_internal_x_size() const {
  return x_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::x_size() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.x_size)
  return _internal_x_size();
}
inline void TFNetworkModel::_internal_set_x_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_size_ = value;
}
inline void TFNetworkModel::set_x_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x_size(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.x_size)
}

// int32 y_size = 6;
inline void TFNetworkModel::clear_y_size() {
  y_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::_internal_y_size() const {
  return y_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::y_size() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.y_size)
  return _internal_y_size();
}
inline void TFNetworkModel::_internal_set_y_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_size_ = value;
}
inline void TFNetworkModel::set_y_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y_size(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.y_size)
}

// int32 batch_size = 8;
inline void TFNetworkModel::clear_batch_size() {
  batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::batch_size() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.batch_size)
  return _internal_batch_size();
}
inline void TFNetworkModel::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_size_ = value;
}
inline void TFNetworkModel::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.batch_size)
}

// int32 num_classes = 9;
inline void TFNetworkModel::clear_num_classes() {
  num_classes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::_internal_num_classes() const {
  return num_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TFNetworkModel::num_classes() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.num_classes)
  return _internal_num_classes();
}
inline void TFNetworkModel::_internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_classes_ = value;
}
inline void TFNetworkModel::set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.num_classes)
}

// bool using_ctc = 10;
inline void TFNetworkModel::clear_using_ctc() {
  using_ctc_ = false;
}
inline bool TFNetworkModel::_internal_using_ctc() const {
  return using_ctc_;
}
inline bool TFNetworkModel::using_ctc() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.using_ctc)
  return _internal_using_ctc();
}
inline void TFNetworkModel::_internal_set_using_ctc(bool value) {
  
  using_ctc_ = value;
}
inline void TFNetworkModel::set_using_ctc(bool value) {
  _internal_set_using_ctc(value);
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.using_ctc)
}

// string image_input = 11;
inline void TFNetworkModel::clear_image_input() {
  image_input_.ClearToEmpty();
}
inline const std::string& TFNetworkModel::image_input() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.image_input)
  return _internal_image_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TFNetworkModel::set_image_input(ArgT0&& arg0, ArgT... args) {
 
 image_input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.image_input)
}
inline std::string* TFNetworkModel::mutable_image_input() {
  std::string* _s = _internal_mutable_image_input();
  // @@protoc_insertion_point(field_mutable:tesseract.TFNetworkModel.image_input)
  return _s;
}
inline const std::string& TFNetworkModel::_internal_image_input() const {
  return image_input_.Get();
}
inline void TFNetworkModel::_internal_set_image_input(const std::string& value) {
  
  image_input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::_internal_mutable_image_input() {
  
  return image_input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::release_image_input() {
  // @@protoc_insertion_point(field_release:tesseract.TFNetworkModel.image_input)
  return image_input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TFNetworkModel::set_allocated_image_input(std::string* image_input) {
  if (image_input != nullptr) {
    
  } else {
    
  }
  image_input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_input,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tesseract.TFNetworkModel.image_input)
}

// string image_widths = 12;
inline void TFNetworkModel::clear_image_widths() {
  image_widths_.ClearToEmpty();
}
inline const std::string& TFNetworkModel::image_widths() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.image_widths)
  return _internal_image_widths();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TFNetworkModel::set_image_widths(ArgT0&& arg0, ArgT... args) {
 
 image_widths_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.image_widths)
}
inline std::string* TFNetworkModel::mutable_image_widths() {
  std::string* _s = _internal_mutable_image_widths();
  // @@protoc_insertion_point(field_mutable:tesseract.TFNetworkModel.image_widths)
  return _s;
}
inline const std::string& TFNetworkModel::_internal_image_widths() const {
  return image_widths_.Get();
}
inline void TFNetworkModel::_internal_set_image_widths(const std::string& value) {
  
  image_widths_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::_internal_mutable_image_widths() {
  
  return image_widths_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::release_image_widths() {
  // @@protoc_insertion_point(field_release:tesseract.TFNetworkModel.image_widths)
  return image_widths_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TFNetworkModel::set_allocated_image_widths(std::string* image_widths) {
  if (image_widths != nullptr) {
    
  } else {
    
  }
  image_widths_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_widths,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tesseract.TFNetworkModel.image_widths)
}

// string image_heights = 13;
inline void TFNetworkModel::clear_image_heights() {
  image_heights_.ClearToEmpty();
}
inline const std::string& TFNetworkModel::image_heights() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.image_heights)
  return _internal_image_heights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TFNetworkModel::set_image_heights(ArgT0&& arg0, ArgT... args) {
 
 image_heights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.image_heights)
}
inline std::string* TFNetworkModel::mutable_image_heights() {
  std::string* _s = _internal_mutable_image_heights();
  // @@protoc_insertion_point(field_mutable:tesseract.TFNetworkModel.image_heights)
  return _s;
}
inline const std::string& TFNetworkModel::_internal_image_heights() const {
  return image_heights_.Get();
}
inline void TFNetworkModel::_internal_set_image_heights(const std::string& value) {
  
  image_heights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::_internal_mutable_image_heights() {
  
  return image_heights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::release_image_heights() {
  // @@protoc_insertion_point(field_release:tesseract.TFNetworkModel.image_heights)
  return image_heights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TFNetworkModel::set_allocated_image_heights(std::string* image_heights) {
  if (image_heights != nullptr) {
    
  } else {
    
  }
  image_heights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_heights,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tesseract.TFNetworkModel.image_heights)
}

// string output_layer = 14;
inline void TFNetworkModel::clear_output_layer() {
  output_layer_.ClearToEmpty();
}
inline const std::string& TFNetworkModel::output_layer() const {
  // @@protoc_insertion_point(field_get:tesseract.TFNetworkModel.output_layer)
  return _internal_output_layer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TFNetworkModel::set_output_layer(ArgT0&& arg0, ArgT... args) {
 
 output_layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tesseract.TFNetworkModel.output_layer)
}
inline std::string* TFNetworkModel::mutable_output_layer() {
  std::string* _s = _internal_mutable_output_layer();
  // @@protoc_insertion_point(field_mutable:tesseract.TFNetworkModel.output_layer)
  return _s;
}
inline const std::string& TFNetworkModel::_internal_output_layer() const {
  return output_layer_.Get();
}
inline void TFNetworkModel::_internal_set_output_layer(const std::string& value) {
  
  output_layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::_internal_mutable_output_layer() {
  
  return output_layer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TFNetworkModel::release_output_layer() {
  // @@protoc_insertion_point(field_release:tesseract.TFNetworkModel.output_layer)
  return output_layer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TFNetworkModel::set_allocated_output_layer(std::string* output_layer) {
  if (output_layer != nullptr) {
    
  } else {
    
  }
  output_layer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_layer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tesseract.TFNetworkModel.output_layer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tesseract

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tfnetwork_2eproto
