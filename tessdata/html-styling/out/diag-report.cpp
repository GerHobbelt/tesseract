/**
 * This file was generated by bin2cpp v3.0.0
 * Copyright (C) 2013-2024 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'diag-report.css', last modified 1721335118.
 * Do not modify this file.
 */
#if defined(_WIN32) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif
#include "diag-report.h"
#include <string> //for std::string
#include <iostream>
#include <fstream>  //for ofstream
namespace bin2cpp
{
  class DiagreportCssFile : public virtual bin2cpp::File
  {
  public:
    DiagreportCssFile() { build(); }
    virtual ~DiagreportCssFile() override {}
    virtual size_t getSize() const { return 3503; }
    virtual const char * getFileName() const { return &getFilePath()[0]; }
    virtual const char * getFilePath() const { return "diag-report.css"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("html {\n  margin: 1em 2em;\n}\nh1 {\n  font-size: 2.5em;\n}\nh2 {\n  font-size: 2em;\n}\nh3 {\n  font-size: 1.75em;\n}\nh4 {\n  font-size: 1.5em;\n}\nh5 {\n  font-size: 1.35em;\n}\nh6 {\n  font-size: 1.25em;\n}\nh2 {\n  ma", 200);
      mBuffer.append("rgin-top: 4em;\n  border-top: 1px solid grey;\n  padding-top: 1em;\n}\nimg {\n  border: solid #b0cfff .5em;\n  /* max-width: 70em; */\n  max-width: 100%;\n  max-height: 100%;\n  margin-left: auto;\n  margin-rig", 200);
      mBuffer.append("ht: auto;\n  display: block;\n}\nfigcaption {\n  background-color: #325180;\n  color: #fff;\n  font-style: italic;\n  padding: .2em;\n  text-align: center;\n}\nfigure {\n  /* max-width: 70em; */\n  margin-left: 0", 200);
      mBuffer.append(";\n  background-color: #c5d5ed;\n}\nblockquote {\n  margin-left: 2em;\n  margin-right: 2em;\n  padding: 0.25em 4em;\n  border: solid 4px #b0cfff;\n  background-color: #ebf3ff;\n  max-width: 66em;\n}\nblockquote.", 200);
      mBuffer.append("command-line {\n  border: solid 4px #ffe3b0;\n  background-color: #fffbeb;\n  max-width: none;\n}\nblockquote.command-line pre {\n  white-space: break-spaces;\n}\nblockquote.command-line h6 {\n  margin-top: 1e", 200);
      mBuffer.append("m;\n  margin-bottom: 1em;\n}\nem {\n  background-color: #f7ffeb;\n}\ntable {\n  border: solid 2px black;\n  text-align: left;\n  border-collapse: collapse;\n}\nth, td {\n  text-align: left;\n  border: solid 1px gr", 200);
      mBuffer.append("ey;\n  padding: 0.1em 0.5em;\n  border-left: none;\n  border-top: none;\n}\ntable tr:nth-child(odd) {\n  background: #eeeff0;\n}\ntable th:last-child, table td:last-child {\n  border-right: none;\n}\ntable tr:la", 200);
      mBuffer.append("st-child th, table tr:last-child td {\n  border-bottom: none;\n}\ncode {\n  padding-left: 0.25em;\n  padding-right: 0.25em;\n  background-color: #daffdd;\n}\ntable.leaders {\n  border: solid 2px #b5c8e6;\n  tex", 200);
      mBuffer.append("t-align: left;\n  border-collapse: collapse;\n\twidth: auto;\n  min-width: 64em;\n\tmargin: .5em auto .5em 0;\n\ttable-layout: fixed;\n}\ntable.leaders th, table.leaders td {\n  text-align: left;\n  border: none;", 200);
      mBuffer.append("\n  border-left: none;\n  border-top: none;\n  white-space: nowrap;\n  padding: .1em .5em;\n  width: auto;\n  vertical-align: bottom;\n}\ntable.leaders tr:nth-child(odd) {\n  background: #f8fcff;\n}\ntable.leade", 200);
      mBuffer.append("rs th:last-child, table.leaders  td:last-child {\n  border-right: none;\n  white-space: break-spaces;\n  text-align  left;\n  padding-left: .5em;\n}\ntable.leaders th:nth-child(2), table.leaders  td:nth-chi", 200);
      mBuffer.append("ld(2) {\n  border-right: none;\n  white-space: break-spaces;\n  text-align  left;\n  padding-left: .5em;\n  width: 11.5em;\n}\ntable.leaders  tr:last-child th, table.leaders  tr:last-child td {\n  border-bott", 200);
      mBuffer.append("om: none;\n  width: auto;\n  max-width: 60%;\n}\ntable.leaders td:first-child {\n  text-align: left;\n  overflow: hidden;\n  position: relative;\n  padding-right: 2em;\n}\ntable.leaders td:first-child::after {\n", 200);
      mBuffer.append("  content: \'\';\n  position: absolute;\n  bottom: calc(.2em + 2px);\n  width: 100%;\n  margin-left: .5em;\n  border-bottom: 2px dotted grey;\n}\ntd.timing-value {\n  text-align: right;\n}\np.timing-info::before ", 200);
      mBuffer.append("{\n  content: \'\342\217\261\357\270\217\360\237\217\203\';\n  margin-right: 1em;\n  margin-left: 1em;\n}\np.timing-info {\n  border: solid 1px #00ff68;\n  padding: .5em;\n  background-color: #effff5;\n  margin: 1em 2em;\n  max-width: 96em;\n}", 200);
      mBuffer.append("\np.error-message {\n  background-color: #fff0f0;\n  padding: 0.5em;\n  border: solid 3px red;\n  margin: 1em;\n  max-width: 96em;\n}\np.warning-message {\n  background-color: #fff9f1;\n  padding: 0.5em;\n  bord", 200);
      mBuffer.append("er: solid 2px #ff9000;\n  margin: 0.5em 1em;\n  max-width: 96em;\n}\nsection.image-display {\n\tborder:  solid 1px grey;\n    padding: 1em 2em;\n\tbackground-color: #f6f6f6;\n\tmargin: 1em;\n\tmax-width: 100em;\n}\n", 200);
      mBuffer.append("section.image-display h6 {\n    font-size: 1.08em;\n    margin-top:  1em;\n}\nsection.image-display p {\n}\n\n", 103);
    }
    virtual bool save(const char * filename) const
    {
      std::ofstream f(filename, std::ios::out | std::ios::binary | std::ios::trunc);
      if (f.fail()) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      f.write(buffer, fileSize);
      f.close();
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getDiagreportCssFile() { static DiagreportCssFile _instance; return _instance; }
  typedef const File & (*t_func)();
  extern bool RegisterFile(t_func iFunctionPointer);
  static bool kDiagreportCssFileRegistered = bin2cpp::RegisterFile(&getDiagreportCssFile);
}; //bin2cpp
